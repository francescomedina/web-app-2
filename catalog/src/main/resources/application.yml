# MongoDB Configuration properties
spring.data.mongodb:
  host: localhost #this configuration will be overridden when deploy inside docker
  port: 27017
  database: user_db
  auto-index-creation: true

# Spring MAIL configuration properties
spring:
  mail:
    host: smtp.gmail.com
    port: 587
    username: progettomalnati@gmail.com
    password: progetto2021
    properties:
      mail:
        smtp.auth: true
        smtp.starttls.enable: true
        debug: true


# JWT configuration
application:
  jwt:
    jwtSecret: tNO+KhVrTj3B4q0+SEwz/NSvZq7y577jOjvY4uPgAR4=
    jwtExpirationMs: 1000000
    jwtHeader: Authorization
    jwtHeaderStart: Bearer


springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: se.magnus.microservices.composite.product
  pathsToMatch: /**

api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  product-composite:

    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a **404 - Not Found** error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be split up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specified productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing product will return **200 Ok**.



server.port: 7000
server.error.include-message: always

spring.application.name: catalog

app.eureka-server: localhost

# JWT configuration
application:
  jwt:
    jwtSecret: tNO+KhVrTj3B4q0+SEwz/NSvZq7y577jOjvY4uPgAR4=
    jwtExpirationMs: 1000000
    jwtHeader: Authorization
    jwtHeaderStart: Bearer

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

#spring.cloud.stream:
#  defaultBinder: kafka
#  default.contentType: application/json
#  bindings:
#    catalog-out-0:
#      destination: catalog
#      producer:
#        required-groups: auditGroup
#    order-out-0:
#      destination: order
#      producer:
#        required-groups: auditGroup
#
#spring.cloud.stream.kafka.binder:
#  brokers: 127.0.0.1
#  defaultBrokerPort: 9092


logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org:
      springframework:
        data:
          mongodb:
            core:
              MongoTemplate=DEBUG:

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"




---
spring.config.activate.on-profile: docker

server.port: 8008

spring.data.mongodb.host: mongodb

app.eureka-server: eureka

spring.cloud.stream.kafka.binder.brokers: kafka


---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

---
spring.config.activate.on-profile: kafka
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1
