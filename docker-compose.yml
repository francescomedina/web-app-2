version: '2.1'

services:

  order:
    build: ./order
    mem_limit: 512m
    ports:
      - "5004:5004"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5004
    depends_on:
      kafka:
        condition: service_started
      eureka:
        condition: service_healthy
      mongod:
        condition: service_healthy

  wallet:
    build: ./wallet
    mem_limit: 512m
    ports:
      - "5003:5003"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5003
    depends_on:
      kafka:
        condition: service_started
      eureka:
        condition: service_healthy
      mongod:
        condition: service_healthy

  warehouse:
    build: ./warehouse
    mem_limit: 512m
    ports:
      - "5002:5002"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5002
    depends_on:
      kafka:
        condition: service_started
      eureka:
        condition: service_healthy
      mongod:
        condition: service_healthy

  catalog:
    build: ./catalog
    mem_limit: 512m
    ports:
      - "8008:8008"
      - "5005:5005"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    depends_on:
      kafka:
        condition: service_started
      mongod:
        condition: service_healthy

  mongod:
    ports:
      - '27017:27017'
    container_name: mongod
    image: debezium/example-mongodb:1.8
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60
    command: [ "--replSet", "library-mongodb-replicaset"]
    volumes:
      - ./mongod:/data/db

  mongod-1:
    ports:
      - '27018:27017'
    container_name: mongo-rp-1
    command: [ "--replSet", "library-mongodb-replicaset"]
    image: debezium/example-mongodb:1.8
    depends_on:
      - mongod
    volumes:
      - ./mongod-1:/data/db

  kowl:
    image: quay.io/cloudhut/kowl:master-d782eab
    container_name: kowl
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_BROKERS: kafka:9092

  kafka:
    image: debezium/kafka:1.8
    ports:
      - "9092:9092"
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS="docker-connect-offset:1:1,docker-connect-configs:1:1,docker-connect-status:1:1"

  zookeeper:
    image: debezium/zookeeper:1.8
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"

  eureka:
    build: ./eureka
    mem_limit: 512m
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://eureka:8761" ]
      interval: 5s
      timeout: 3s
      retries: 10

#  connect:
#    container_name: connect
#    ports:
#      - '8083:8083'
#    environment:
#      - GROUP_ID=1
#      - CONFIG_STORAGE_TOPIC=docker-connect-configs
#      - OFFSET_STORAGE_TOPIC=docker-connect-offset
#      - STATUS_STORAGE_TOPIC=docker-connect-status
#      - 'BOOTSTRAP_SERVERS=kafka:9092'
#    links:
#      - zookeeper:zookeeper
#      - kafka:kafka
#      - mongod:mongod
#    image: debezium/connect:latest

  jaeger:
    image: jaegertracing/all-in-one:1
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  connect:
    image: debezium/strimzi-connect
    build: ./debezium-strimzi
    ports:
      - "8083:8083"
    links:
      - kafka:kafka
      - mongod:mongod
      - zookeeper:zookeeper
    environment:
      - KAFKA_LOG4J_OPTS=-Dlog4j.configuration=file:/opt/kafka/config/connect-log4j.properties
      - KAFKA_CONNECT_BOOTSTRAP_SERVERS=kafka:9092
      - |
        KAFKA_CONNECT_CONFIGURATION=
        key.converter=org.apache.kafka.connect.json.JsonConverter
        value.converter=org.apache.kafka.connect.json.JsonConverter
        key.converter.schemas.enable=false
        value.converter.schemas.enable=false
        group.id=connect
        offset.storage.topic=connect-offsets
        offset.storage.replication.factor=1
        config.storage.topic=connect-configs
        config.storage.replication.factor=1
        status.storage.topic=connect-status
        status.storage.replication.factor=1
        consumer.interceptor.classes=io.opentracing.contrib.kafka.TracingConsumerInterceptor
        producer.interceptor.classes=io.opentracing.contrib.kafka.TracingProducerInterceptor
      - JAEGER_SERVICE_NAME=kafka-connect
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
      - STRIMZI_TRACING=jaeger
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=docker-connect-configs
      - OFFSET_STORAGE_TOPIC=docker-connect-offset
      - STATUS_STORAGE_TOPIC=docker-connect-status
    command: /opt/kafka/kafka_connect_run.sh
    depends_on:
      - kafka