server.port: 7001
server.error.include-message: always

spring.application.name: warehouse

app.eureka-server: localhost

# JWT configuration
application:
  jwt:
    jwtSecret: tNO+KhVrTj3B4q0+SEwz/NSvZq7y577jOjvY4uPgAR4=
    jwtExpirationMs: 1000000
    jwtHeader: Authorization
    jwtHeaderStart: Bearer

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    hostname: localhost
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

spring.data.mongodb:
  host: localhost
  port: 27017
  database: warehouse-db

spring.cloud.function.definition: checkAvailability;decrementQuantity

spring.cloud.stream:
  defaultBinder: kafka
  default.contentType: application/json
  bindings:
    checkAvailability-in-0:
      destination: order-created
      group: checkAvailabilityGroup
      consumer:
        maxAttempts: 3
        backOffInitialInterval: 500
        backOffMaxInterval: 1000
        backOffMultiplier: 2.0
    checkAvailability-out-0:
      destination: warehouse-checked
      producer:
        required-groups: auditGroup
    decrementQuantity-in-0:
      destination: wallet-response
      group: walletResponseGroup
      consumer:
        maxAttempts: 3
        backOffInitialInterval: 500
        backOffMaxInterval: 1000
        backOffMultiplier: 2.0
    decrementQuantity-out-0:
      destination: warehouse-decremented
      producer:
        required-groups: auditGroup
#    messageProcessor-in-0:
#      destination: wallet-response,order-created
#      group: warehouseGroup
#      consumer:
#        maxAttempts: 3
#        backOffInitialInterval: 500
#        backOffMaxInterval: 1000
#        backOffMultiplier: 2.0
#    messageProcessor-out-0:
#      destination: warehouse-checked
#      producer:
#        required-groups: auditGroup
#    messageProcessor-out-1:
#      destination: warehouse-checked
#      producer:
#        required-groups: auditGroup
  kafka:
    binder:
      brokers: 127.0.0.1
      defaultBrokerPort: 9092
    bindings:
#      messageProcessor-in-0:
#        consumer:
#          enableDlq: true
      checkAvailability-in-0:
        consumer:
          enableDlq: true
      decrementQuantity-in-0:
        consumer:
          enableDlq: true

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.springframework.data.mongodb.core.ReactiveMongoTemplate: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
---
spring.config.activate.on-profile: docker

server.port: 8008

app.eureka-server: eureka

spring.data.mongodb.host: mongodb

spring.cloud.stream:
  kafka:
    binder:
      brokers: kafka

---
#spring.config.activate.on-profile: streaming_partitioned
#
#spring.cloud.stream:
#  bindings:
#    checkAvailability-in-0:
#      consumer:
#        partitioned: true
#        instanceCount: 2
#    decrementQuantity-in-0:
#      consumer:
#        partitioned: true
#        instanceCount: 2
#
#---
#spring.config.activate.on-profile: streaming_instance_0
#
#spring.cloud.stream:
#  bindings:
#    messageProcessor-in-0:
#      consumer:
#        instanceIndex: 0
#
#---
#spring.config.activate.on-profile: streaming_instance_1
#
#spring.cloud.stream:
#  bindings:
#    messageProcessor-in-0:
#      consumer:
#        instanceIndex: 1
#
#---
spring.config.activate.on-profile: kafka
spring.cloud.stream:
  defaultBinder: kafka
  kafka:
    binder:
      replication-factor: 1
spring.kafka.bootstrap-servers: kafka:9092
